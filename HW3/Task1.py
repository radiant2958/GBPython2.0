# Вручную создайте список с целыми числами, которые
# повторяются. Получите новый список, который содержит
# уникальные (без повтора) элементы исходного списка.
# ✔ *Подготовьте два решения, короткое и длинное, которое
# не использует другие коллекции помимо списков.
# import random

# my_list = [random.randint(1, 10) for _ in range(10)]
# print(my_list)
# set_my_list = list(set(my_list))
# print(set_my_list)
# uniq_element = []
# for i in my_list:
#     if i not in uniq_element:
#         uniq_element.append(i)
# print(uniq_element)

# Пользователь вводит данные. Сделайте проверку данных
# и преобразуйте если возможно в один из вариантов ниже:
# ✔ Целое положительное число
# ✔ Вещественное положительное или отрицательное число
# ✔ Строку в нижнем регистре, если в строке есть
# хотя бы одна заглавная буква
# ✔ Строку в нижнем регистре в остальных случаях


# tmp = input("Введите данные: ")
# try:

#     tmp_int = int(tmp)
#     if tmp_int>=0:
#         print(f"целое положительное число {tmp}")
# except ValueError:
#     pass

# try:
#     tmp_float = float(tmp)
#     if tmp_float>0:
#         print(f"Вещественное положительное число {tmp_float}")
#     else:
#         print(f"Вещественное отрицательное число {tmp_float}")
# except ValueError:
#     pass

# if any(i.isupper() for i in tmp):
#     print(tmp.lower())

# Создайте вручную кортеж содержащий элементы разных типов. 
# Получите из него словарь списков, где:
# ключ — тип элемента,
# значение — список элементов данного типа.

# my_tuple = (42,                  # Целое число
#              3.14,                # Вещественное число
#              "строка",            # Строка
#              [1, 2, 3],           # Список
#              {'ключ': 'значение'}, # Словарь
#              True,                # Булево значение
#              (5, 6, 7),           # Другой кортеж
#              None)                # None (ничего)
# print(my_tuple)
# my_dick = {}
# for i in my_tuple:
#     type_element = type(i)
#     if type_element not in my_dick:
#         my_dick[type_element]=[i]
#     else:
#         my_dick[type_element].append(i)

# print(my_dick)

# ✔ Создайте вручную список с повторяющимися элементами.
# ✔ Удалите из него все элементы, которые встречаются дважды.


# my_list = [1, 2, 3, 4, 2, 5, 6, 7, 3, 8, 9, 9, 10]
# my_dict = {}

# for i in my_list:
#     if i not in my_dict:
#         my_dict[i] = 1
#     else:
#         my_dict[i]=my_dict[i]+1

# my_list=[i for i in my_list if my_dict[i]!=2]
# print(my_list)


# ✔ Создайте вручную список с повторяющимися целыми числами.
# ✔ Сформируйте список с порядковыми номерами
# нечётных элементов исходного списка.
# ✔ Нумерация начинается с единицы.
# my_list = [1, 2, 3, 4, 2, 5, 6, 7, 3, 8, 9, 9, 10]

# odd_element = [ i+1 for i in range(0,len(my_list)) if my_list[i] % 2 !=0]
    
# print(odd_element)

# Пользователь вводит строку текста. Вывести каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого длинного
# слова был один пробел между ним и номером строки.

# my_str = input("Введите строку: ")
# my_str = sorted(my_str.split())
# max_len = max(len(i) for i in my_str)

# for i, j in enumerate(my_str, 1):

#     word = j.rjust(max_len+1)

#     print(f"{i}.{word}")



# ✔ Пользователь вводит строку текста.
# ✔ Подсчитайте сколько раз встречается
# каждая буква в строке без использования
# метода count и с ним.
# ✔ Результат сохраните в словаре, где ключ —
# символ, а значение — частота встречи
# символа в строке.
# ✔ Обратите внимание на порядок ключей.
# Объясните почему они совпадают
# или не совпадают в ваших решениях.
# my_str = input('Введите строку: ')
# my_str = my_str.lower().split()
# my_dict = {}

# for i in my_str:
#     for j in i:
#         if j not in my_dict:
#             my_dict[j]=1
#         else:
#             my_dict[j]+=1

# print(my_dict)

# ✔ Три друга взяли вещи в поход. Сформируйте
# словарь, где ключ — имя друга, а значение —
# кортеж вещей. Ответьте на вопросы:
# ✔ Какие вещи взяли все три друга
# ✔ Какие вещи уникальны, есть только у одного друга
# ✔ Какие вещи есть у всех друзей кроме одного
# и имя того, у кого данная вещь отсутствует
# ✔ Для решения используйте операции
# с множествами. Код должен расширяться
# на любое большее количество друзей.


# expedition = {
#     "Антон": ("палатка", "рюкзак", "фонарик", "компас", "хлеб" ),
#     "Борис": ("палатка", "рюкзак", "термос", "фонарик", "вода"),
#     "Виктор": ("палатка", "термос", "консервы", "компас")
# }

# # Вещи, которые взяли все трое друзей
# common_things = set(expedition["Антон"])
# for friend in expedition:
#     common_things &= set(expedition[friend])

# # Вещи уникальны для каждого друга
# unique_things = {}
# for friend, things in expedition.items():
#     unique = set(things) - set().union(*(expedition[i] for i in expedition if i != friend))
#     unique_things[friend] = unique


# # Вещи, которые есть у всех, кроме одного
# not_things = {}
# for f in expedition:
#     other_things = set().union(*(expedition[i] for i in expedition if i != f))
#     thing_not = other_things - set(expedition[f])
#     not_things[f]= thing_not

# print("Вещи, взятые всеми друзьями:", common_things)
# print("Уникальные вещи для каждого друга:", unique_things)
# print("Вещи, отсутствующие у каждого друга:", not_things)